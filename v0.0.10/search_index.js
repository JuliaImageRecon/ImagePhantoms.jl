var documenterSearchIndex = {"docs":
[{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/04-gauss.jl\"","category":"page"},{"location":"generated/examples/04-gauss/#gauss","page":"2D Gaussian","title":"2D Gaussian","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"This page illustrates the Gauss2 shape in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"This page was generated from a single Julia file: 04-gauss.jl.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"The corresponding notebook can be viewed in nbviewer here: 04-gauss.ipynb, and opened in binder here: 04-gauss.ipynb.","category":"page"},{"location":"generated/examples/04-gauss/#Setup","page":"2D Gaussian","title":"Setup","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Packages needed here.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"using ImagePhantoms: Gauss2, phantom, radon, spectrum\nimport ImagePhantoms as IP\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing FFTW: fft, fftshift\nusing Unitful: mm, unit, °\nusing UnitfulRecipes\nusing Plots: plot, plot!, scatter!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/04-gauss/#Overview","page":"2D Gaussian","title":"Overview","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Another useful shape for constructing 2D digital image phantoms is the 2D Gaussian, specified by its center, widths, angle and value. All of the methods in ImagePhantoms support physical units, so we use such units throughout this example. (Using units is recommended but not required.)","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Define a 2D Gaussian object, using physical units.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"width = (5mm, 2mm) # full-width at half-maximum (FHWM)\nob = Gauss2((2mm, 3mm), width, π/6, 1.0f0)","category":"page"},{"location":"generated/examples/04-gauss/#Phantom-image-using-phantom","page":"2D Gaussian","title":"Phantom image using phantom","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"dx = 0.02mm\ndy = 0.024mm\n(M,N) = (3*2^9, 2^10+2)\nx = (-M÷2:M÷2-1) * dx\ny = (-N÷2:N÷2-1) * dy\nimg = phantom(x, y, [ob])\njim(x, y, img, \"2D Gaussian image\")","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Hereafter we use ImageGeoms to simplify the indexing.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"ig = ImageGeom(dims=(M,N), deltas=(dx,dy), offsets=(0.5,0.5))\n@assert all(axes(ig) .≈ (x,y))\np1 = jim(axes(ig)..., img, \"2D Gaussian phantom\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"generated/examples/04-gauss/#Spectrum-using-spectrum","page":"2D Gaussian","title":"Spectrum using spectrum","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"There are two ways to examine the spectrum of this image:","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"using the analytical Fourier transform of the 2D Gaussian via spectrum\napplying the DFT via FFT to the digital image.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Because the shape has units mm, the spectra axes have units cycles/mm.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"zscale = 1 / IP.fwhm2spread(1)^2 / prod(width) # normalize spectra by area\nspectrum_exact = spectrum(axesf(ig)..., [ob]) * zscale\nsp = z -> max(log10(abs(z)/oneunit(abs(z))), -6) # log-scale for display\nclim = (-6, 0) # colorbar limit for display\n(xlabel, ylabel) = (\"ν₁\", \"ν₂\")\np2 = jim(axesf(ig)..., sp.(spectrum_exact), \"log10|Spectrum|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Sadly fft cannot handle units currently, so this function is a work-around:","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"function myfft(x::AbstractArray{<:Any})\n    u = unit(eltype(x))\n    return fftshift(fft(fftshift(x) / u)) * u\nend\n\nspectrum_fft = myfft(img) * dx * dy * zscale\np3 = jim(axesf(ig)..., sp.(spectrum_fft), \"log10|DFT|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Compare the DFT and analytical spectra to validate the code","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"err = maximum(abs, spectrum_exact - spectrum_fft) /\n        maximum(abs, spectrum_exact)\n@assert err < 1e-6\np4 = jim(axesf(ig)..., 1e6*abs.(spectrum_fft - spectrum_exact), \"Difference × 1e6\"; xlabel, ylabel)\njim(p1, p4, p2, p3)","category":"page"},{"location":"generated/examples/04-gauss/#Radon-transform-using-radon","page":"2D Gaussian","title":"Radon transform using radon","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Examine the Radon transform of the 2D Gaussian using radon, and validate it using the projection-slice theorem aka Fourier-slice theorem.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"dr = 0.02mm # radial sample spacing\nnr = 2^10 # radial sinogram bins\nr = (-nr÷2:nr÷2-1) * dr # radial samples\nfr = (-nr÷2:nr÷2-1) / nr / dr # corresponding spectral axis\nϕ = deg2rad.(0:180) # * Unitful.rad # todo round unitful Unitful.°\nsino = radon(ob).(r, ϕ') # sample Radon transform of a single shape object\np5 = jim(r, rad2deg.(ϕ), sino; aspect_ratio=:none, title=\"sinogram\", yflip=false, xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Note that the maximum sinogram value is about fwhm2spread(5mm) = 5mm * sqrt(π / log(16)) ≈ 5.3mm which makes sense for a 2D Gaussian whose longest axis has FWHM = 5mm.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"The above sampling generated a parallel-beam sinogram, but one could make a fan-beam sinogram by sampling (r, ϕ) appropriately.","category":"page"},{"location":"generated/examples/04-gauss/#Fourier-slice-theorem-illustration","page":"2D Gaussian","title":"Fourier-slice theorem illustration","text":"","category":"section"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"Pick one particular view angle (55°) and look at its slice and spectra.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"ia = argmin(abs.(ϕ .- 55°))\nslice = sino[:,ia]\nslice_fft = myfft(slice) * dr\nangle = round(rad2deg(ϕ[ia]), digits=1)\n\nkx, ky = (fr * cos(ϕ[ia]), fr * sin(ϕ[ia])) # Fourier-slice theorem\nslice_ft = spectrum(ob).(kx, ky)\nerr = maximum(abs, slice_ft - slice_fft) / maximum(abs, slice_ft)\n@assert err < 4e-4\n\np3 = plot(r, slice, title=\"profile at ϕ = $angle\", label=\"\")\np4 = plot(title=\"1D spectra\")\nscatter!(fr, abs.(slice_fft), label=\"abs fft\", color=:blue)\nscatter!(fr, real(slice_fft), label=\"real fft\", color=:green)\nscatter!(fr, imag(slice_fft), label=\"imag fft\", color=:red,\n    xlims=(-1,1).*(0.8/mm))\n\nplot!(fr, abs.(slice_ft), label=\"abs\", color=:blue)\nplot!(fr, real(slice_ft), label=\"real\", color=:green)\nplot!(fr, imag(slice_ft), label=\"imag\", color=:red)\nplot(p1, p5, p3, p4)","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"The good agreement between the analytical spectra (solid lines) and the DFT samples (disks) validates that phantom, radon, and spectrum are all self consistent for this Gauss2 object.","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"","category":"page"},{"location":"generated/examples/04-gauss/","page":"2D Gaussian","title":"2D Gaussian","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/10-mri-sense.jl\"","category":"page"},{"location":"generated/examples/10-mri-sense/#mri-sense","page":"MRI SENSE","title":"MRI SENSE","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"This page illustrates the mri_smap_fit and mri_spectra methods in the Julia package ImagePhantoms for performing MRI simulations with realistic sensitivity encoding (SENSE).","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"This page was generated from a single Julia file: 10-mri-sense.jl.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"The corresponding notebook can be viewed in nbviewer here: 10-mri-sense.ipynb, and opened in binder here: 10-mri-sense.ipynb.","category":"page"},{"location":"generated/examples/10-mri-sense/#Setup","page":"MRI SENSE","title":"Setup","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Packages needed here.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"using ImagePhantoms: ellipse_parameters, SheppLoganBrainWeb, Ellipse\nusing ImagePhantoms: phantom, mri_smap_fit, mri_spectra\nusing FFTW: fft, fftshift\nusing ImageGeoms: embed\nusing LazyGrids: ndgrid\nusing MIRT: ir_mri_sensemap_sim\nusing MIRTjim: jim, prompt; jim(:prompt, true)\nusing Random: seed!\nusing Unitful: mm","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/10-mri-sense/#Overview","page":"MRI SENSE","title":"Overview","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Modern MRI scanners use multiple receive coils each of which has its own \"sensitivity map\" (or \"coil profile\"). Realistic MRI simulations should account for the effects of those sensitivity maps analytically, rather than committing the \"inverse crime\" of using rasterized phantoms and maps.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"See the 2012 paper Guerquin-Kern et al. that combines analytical k-space values of the phantom with an analytical model for the sensitivity maps. This package follows the recommended approach from that paper. We used the mri_smap_fit function to fit each sensitivity map with a modest number of complex exponential signals. Then, instead of using the spectrum function we use the spectra function to generate simulated k-space data from analytical phantoms (like ellipses).","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Because FFTW.fft cannot handle units, this function is a work-around.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"function myfft(x::AbstractArray{T}) where {T <: Number}\n    u = oneunit(T)\n    return fftshift(fft(fftshift(x) / u)) * u\nend","category":"page"},{"location":"generated/examples/10-mri-sense/#Phantom","page":"MRI SENSE","title":"Phantom","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Image geometry:","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"fovs = (256mm, 250mm)\nnx, ny = (128, 100) .* 2\ndx, dy = fovs ./ (nx,ny)\nx = (-(nx÷2):(nx÷2-1)) * dx\ny = (-(ny÷2):(ny÷2-1)) * dy","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Define Shepp-Logan phantom object, with random complex phases to make it a bit more realistic.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"oa = ellipse_parameters(SheppLoganBrainWeb() ; disjoint=true, fovs)\nseed!(0)\noa[:,end] = [1; randn(ComplexF32, 9)] # random phases\noa = Ellipse(oa)\noversample = 3\nimage0 = phantom(x, y, oa, oversample)\ncfun = z -> cat(dims = ndims(z)+1, real(z), imag(z))\njim(x, y, cfun(image0), \"Digital phantom\\n (real | imag)\"; ncol=1)","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"In practice, sensitivity maps are usually estimated only over portion of the image array, so we define a simple mask here to exercise this issue.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"mask = trues(nx,ny)\nmask[:,[1:2;end-2:end]] .= false\nmask[[1:8;end-8:end],:] .= false\n@assert mask .* image0 == image0\njim(x, y, mask, \"mask\")","category":"page"},{"location":"generated/examples/10-mri-sense/#Sensitivity-maps","page":"MRI SENSE","title":"Sensitivity maps","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Here we use simulated sensitivity maps from MIRT:","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"ncoil = 2\nsmap = ir_mri_sensemap_sim(dims=(nx,ny), ncoil=ncoil, orbit_start=[0])\njim(x, y, cfun(smap), \"Sensitivity maps raw\")","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Typical sensitivity map estimation methods normalize the maps so that the square-root of the sum of squares (SSoS) is unity:","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"ssos = sqrt.(sum(abs.(smap).^2, dims=ndims(smap))) # SSoS\nssos = selectdim(ssos, ndims(smap), 1)\njim(ssos, \"SSoS for ncoil=$ncoil\")\n\nfor ic=1:ncoil # normalize\n    selectdim(smap, ndims(smap), ic) ./= ssos\nend\nsmap .*= mask\nstacker = x -> [(@view x[:,:,i]) for i=1:size(x,3)]\nsmaps = stacker(smap) # code hereafter expects vector of maps\njim(x, y, cfun(smaps), \"Sensitivity maps (masked and normalized)\")","category":"page"},{"location":"generated/examples/10-mri-sense/#Sensitivity-map-fitting-using-complex-exponentials","page":"MRI SENSE","title":"Sensitivity map fitting using complex exponentials","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"The mri_smap_fit function fits each smap with a linear combination of complex exponential signals. (These signals are not orthogonal due to the mask.) With frequencies -7:7/N, the maximum error is ≤ 0.2%.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"deltas = (dx, dy)\nkmax = 7\nfit = mri_smap_fit(smaps, embed; mask, kmax, deltas)\njim(\n jim(x, y, cfun(smaps), \"Original maps\"; prompt=false, clim=(-1,1)),\n jim(x, y, cfun(fit.smaps), \"Fit maps\"; prompt=false, clim=(-1,1)),\n jim(x, y, cfun(100 * (fit.smaps - smaps)), \"error * 100\"; prompt=false),\n)","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"The fit coefficients are smaller near kmax so probably kmax is large enough.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"coefs = map(x -> reshape(x,15,15), fit.coefs)\njim(-kmax:kmax, -kmax:kmax, cfun(coefs), \"coefs\", prompt=false)","category":"page"},{"location":"generated/examples/10-mri-sense/#Compare-FFT-with-analytical-spectra","page":"MRI SENSE","title":"Compare FFT with analytical spectra","text":"","category":"section"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Frequency sample vectors:","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"fx = (-(nx÷2):(nx÷2-1)) / (nx*dx) # crucial to match `mri_smap_basis` internals!\nfy = (-(ny÷2):(ny÷2-1)) / (ny*dy)\ngx, gy = ndgrid(fx, fy);\nnothing #hide","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Analytical spectra computation for complex phantom using all smaps. Note the fit argument.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"kspace1 = mri_spectra(vec(gx), vec(gy), oa, fit)\nkspace1 = [reshape(k, nx, ny) for k in kspace1]\np1 = jim(fx, fy, cfun(kspace1), \"Analytical\")","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"FFT spectra computation based on digital image and sensitivity maps:","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"image2 = [image0 .* s for s in smaps] # digital\nkspace2 = myfft.(image2) * (dx * dy)\np2 = jim(fx, fy, cfun(kspace2), \"FFT-based\")","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"p3 = jim(fx, fy, cfun(kspace2 - kspace1), \"Error\")","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"Zoom in to illustrate similarity:","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"xlims = (-1,1) .* (0.06/mm)\nylims = (-1,1) .* (0.06/mm)\njim(\n jim(fx, fy, real(kspace1[1]), \"Analytical\"; xlims, ylims),\n jim(fx, fy, real(kspace2[1]), \"FFT-based\"; xlims, ylims),\n jim(fx, fy, real(kspace2[1] - kspace1[1]), \"Error\"; xlims, ylims),\n)","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"In summary, the mri_smap_fit and mri_spectra methods here reproduce the approach in the 2012 Guerquin-Kern paper, cited above, enabling parallel MRI simulations that avoid an inverse crime.","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"","category":"page"},{"location":"generated/examples/10-mri-sense/","page":"MRI SENSE","title":"MRI SENSE","text":"This page was generated using Literate.jl.","category":"page"},{"location":"methods/#Methods-list","page":"Methods","title":"Methods list","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"","category":"page"},{"location":"methods/#Methods-usage","page":"Methods","title":"Methods usage","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Modules = [ImagePhantoms]","category":"page"},{"location":"methods/#ImagePhantoms.AbstractShape","page":"Methods","title":"ImagePhantoms.AbstractShape","text":"AbstractShape\n\nGeneric shape type for ImagePhantoms.\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.AbstractShape2","page":"Methods","title":"ImagePhantoms.AbstractShape2","text":"AbstractShape2 <: AbstractShape\n\nGeneric 2D shape type (with subtypes Ellipse...)\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.AbstractShape3","page":"Methods","title":"ImagePhantoms.AbstractShape3","text":"AbstractShape2 <: AbstractShape\n\nGeneric 3D shape type (with subtypes Ellipsoid...)\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Ellipse","page":"Methods","title":"ImagePhantoms.Ellipse","text":"Ellipse(cx, cy, rx=1, ry=rx, ϕ=0, value::Number=1)\nEllipse(center::NTuple{2,RealU}, radii::NTuple{2,RealU}=(1,1), ϕ::RealU=0, v=1)\nEllipse([6-vector])\n\nConstruct Ellipse object from parameters.\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Ellipse-2","page":"Methods","title":"ImagePhantoms.Ellipse","text":"Ellipse <: AbstractShape2\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Ellipse-Tuple{AbstractMatrix{<:Number}}","page":"Methods","title":"ImagePhantoms.Ellipse","text":"phantom = Ellipse(n × 6 AbstractMatrix)\n\nReturn vector of Ellipse objects, one for each row of input matrix.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.EllipsePhantomVersion","page":"Methods","title":"ImagePhantoms.EllipsePhantomVersion","text":"EllipsePhantomVersion\n\nParent type for different versions of ellipse phantoms:\n\nSheppLogan original CT version from Shepp&Logan paper\nSheppLoganEmis higher contrast version suitable for emission tomography\nSheppLoganBrainWeb integer index version based on brainweb\nSheppLoganToft higher contrast version from Toft, 1996\nSouthPark for fun\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Gauss2","page":"Methods","title":"ImagePhantoms.Gauss2","text":"Gauss2(cx, cy, wx, wy=wx, ϕ=0, value::Number=1)\nGauss2(center::NTuple{2,RealU}, width::NTuple{2,RealU}=(1,1), ϕ::RealU=0, v=1)\nGauss2([6-vector])\nGauss2(w, v=1) (isotropic of width `w`)\n\nConstruct Gauss2 object from parameters; here width = FWHM (full-width at half-maximum).\n\nIn 1D, the formula is g(x) = exp(-π ((x - cx) / sx)^2) where sx = fwhm2spread(w) = w * sqrt(π / log(16)), which, for cx=0,  has 1D FT G(ν) = sx^2 exp(π (sx νx)^2).\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Gauss2-2","page":"Methods","title":"ImagePhantoms.Gauss2","text":"Gauss2 <: AbstractShape2\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Object","page":"Methods","title":"ImagePhantoms.Object","text":"Object{S, D, V, ...}(center, width, angle, value, param) <: AbstractObject\n\nGeneral container for 2D and 3D objects for defining image phantoms.\n\ncenter::NTuple{D,C} coordinates of \"center\" of this object\nwidth::NTuple{W,C} \"width\" along axis; usually W=D or W=1 (e.g., FWHM for Gauss, radii for Ellipse, radius of Circle)\nangle::NTuple{D-1,A} angle of x' axis relative to x axis, in radians (or with units)\nvalue::V \"intensity\" value for this object\nparam optional additional shape parameters (often nothing)\n\nExample\n\njulia> Object(Ellipse(), (0,0), (1,2), 0.0, 1//2, nothing)\nObject2d{Ellipse, Rational{Int64}, 2, Int64, Float64, Nothing} (S, D, V, ...)\n shape::Ellipse Ellipse()\n center::NTuple{2,Int64} (0, 0)\n width::NTuple{2,Int64} (1, 2)\n angle::Tuple{Float64} (0.0,)\n value::Rational{Int64} 1//2\n param::Nothing nothing\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{AbstractShape2}, Tuple{C}} where C<:Number","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape ; center=(0,0), width=(1,1), angle=0, value=1, param=nothing)\n\n2D object constructor using keywords.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{AbstractShape3}, Tuple{C}, Tuple{W}} where {W, C<:Number}","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape ; center=(0,0,0), width=(1,1,1), angle=(0,0), value=1, param=nothing)\n\n3D object constructor using keywords.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{C}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W, Number}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W, Number, Number}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W, Number, Number, Any}} where C<:Number","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape, center, width, angle=0, value=1, param=nothing)\n\n2D object constructor.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{C}, Tuple{D}, Tuple{S}, Tuple{S, Tuple{Vararg{C, D}}}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W, Tuple{Vararg{Number, Da}} where Da}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W, Tuple{Vararg{Number, Da}} where Da, Number}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W, Tuple{Vararg{Number, Da}} where Da, Number, Any}} where {S<:AbstractShape, D, C<:Number}","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape, center, width, angle, value, param)\n\nGeneral outer object constructor where angle is a tuple, including 3D case.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{Object{S, D}}, Tuple{Da}, Tuple{D}, Tuple{S}} where {S, D, Da}","page":"Methods","title":"ImagePhantoms.Object","text":"Object(ob::Object ; center, width, angle, value, param)\n\nMake a copy of Object ob, optionally modifying some values.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object2d","page":"Methods","title":"ImagePhantoms.Object2d","text":"Object2d = Object{S,2} where S <: AbstractObject\n\nFor 2D objects\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Object3d","page":"Methods","title":"ImagePhantoms.Object3d","text":"Object3d = Object{S,3} where S <: AbstractObject\n\nFor 3D objects\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Rect","page":"Methods","title":"ImagePhantoms.Rect","text":"Rect(cx, cy, wx=1, wy=wx, ϕ=0, value::Number=1)\nRect(center::NTuple{2,RealU}, width::NTuple{2,RealU}=(1,1), ϕ::RealU=0, v=1)\nRect([6-vector])\n\nConstruct Rect object from parameters; here width is the full-width.\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Rect-2","page":"Methods","title":"ImagePhantoms.Rect","text":"Rect <: AbstractShape2\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.SheppLogan","page":"Methods","title":"ImagePhantoms.SheppLogan","text":"SheppLogan\n\nOriginal version from : Larry A Shepp, Benjamin F Logan, \"The Fourier reconstruction of a head section,\" IEEE Transactions on Nuclear Science, 21(3):21-42, June 1974. doi\n\nAlso in Kak and Slaney 1988 text, p. 255. doi\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.SheppLoganToft","page":"Methods","title":"ImagePhantoms.SheppLoganToft","text":"SheppLoganToft\n\nToft, Peter Aundal & Sørensen, John Aasted \"The Radon transform-theory and implementation,\" Technical University of Denmark (DTU), 1996. Page 201. https://files.openpdfs.org/1ra51GP6gJO.pdf\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Triangle","page":"Methods","title":"ImagePhantoms.Triangle","text":"Triangle(cx, cy, wx=1, wy=wx, ϕ=0, value::Number=1, param::Real=0.5)\nTriangle(center::NTuple{2,RealU}, width::NTuple{2,RealU}=(1,1), ϕ::RealU=0, v=1, param=0.5)\nTriangle([6-vector] or [7-vector])\n\nConstruct Triangle object from parameters. In the typical case where param=0.5 and width[1] == width[2], this is an equilateral triangle with base width[1] centered along the x axis.\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Triangle-2","page":"Methods","title":"ImagePhantoms.Triangle","text":"Triangle{T} <: AbstractShape2\n\nBy default an equilateral triangle pointing upward with the \"center\" in the middle of the base, for the default parameter = 0.5.\n\nFor parameter p the object is a triangle whose base is along the x-axis going from (-p,0) to (1-p,0)` and with height=sqrt(3)/2.\n\nMost methods currently support only the case p=0.5.\n\n\n\n\n\n","category":"type"},{"location":"methods/#Base.:*-Tuple{AbstractObject, Number}","page":"Methods","title":"Base.:*","text":"(*)(ob::Object, x::Number)\n(*)(x::Number, ob::Object)\n\nScale object value by x.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Union{Tuple{D}, Tuple{S}, Tuple{IO, MIME{Symbol(\"text/plain\")}, Object{S, D}}} where {S, D}","page":"Methods","title":"Base.show","text":"show(io::IO, ::MIME\"text/plain\", ob::Object)\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Circle","page":"Methods","title":"ImagePhantoms.Circle","text":"Circle(x,y,r,v=1) (circle of radius `r` centered at `(x,y)`)\nCircle((x,y), r=1, v=1) ditto\nCircle([4-vector]) ditto\nCircle(r, v=1) centered at origin\n\nConstruct circle objects as special cases of Ellipse objects.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.Square","page":"Methods","title":"ImagePhantoms.Square","text":"Square(x,y,w,v=1) (square of width `w` centered at `(x,y)`)\nSquare((x,y), w=1, v=1) ditto\nSquare([4-vector]) ditto\nSquare(w, v=1) centered at origin\n\nConstruct Square objects as special cases of Rect objects.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms._interval-Tuple{Real, Number}","page":"Methods","title":"ImagePhantoms._interval","text":"(lower, upper) = _interval(a, b)\n\nDetermine the interval [lower, upper] corresponding to the set {x : b ≤ a x} where a is unitless but b and x have same units.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.coords-Tuple{Object2d, Number, Number}","page":"Methods","title":"ImagePhantoms.coords","text":"coords(object::Object2d, x::RealU, y::RealU)\n\nPut coordinates (x,y) in canonical axes associated with object.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.disk_phantom_params-Tuple{}","page":"Methods","title":"ImagePhantoms.disk_phantom_params","text":"params = disk_phantom_params( ; ...)\n\nGenerate ndisk × 6 ellipse phantom parameters for a head-sized disk plus many disks within it, designed so that the disks have some minimum separation minsep to avoid overlap and to simplify patch-based model fitting.\n\nOptions\n\nfov::Real = 240 image field of view in mm\nrhead::Function = () -> 100 background radius for \"head\" [mm]\nmuhead::Function = () -> 1000 \"μ\" (intensity) value for background head disk\nrdisk::Function = () -> 10 + 10 * rand() random disk radii [10,20]\nmudisk::Function = () -> 100 + 200 * rand() \"μ\" values for disks [100,300]\nndisk::Function = () -> 10 # of random disks\nminsep::Real = 8 minimum disk separation in mm\nmaxtry::Int = 500 give up on adding more disks if this is reached\nwarn::Bool = false warn if maxtry reached?\nseed::Int = 0 if nonzero then use this seed\n\nThe function options can be replaced with rand() for other Distributions.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.ellipse_parameters","page":"Methods","title":"ImagePhantoms.ellipse_parameters","text":"params = ellipse_parameters(case::Symbol; fovs::NTuple{2}, u::Tuple, disjoint::Bool)\n\nBy default the first four columns are unitless \"fractions of field of view\", so columns 1,3 are scaled by xfov and columns 2,4 are scaled by yfov, where (xfov, yfov) = fovs. The optional 3-tuple u specifies scaling and/or units:\n\ncolumns 1-4 (center, radii) are scaled by u[1] (e.g., mm),\ncolumn 5 (angle) is scaled by u[2] (e.g., 1 or °),\ncolumn 6 (value) is scaled by u[3] (e.g., 1/cm) for an attenuation map.\n\nIf disjoint==true then the middle ellipse positions are adjusted to avoid overlap.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.ellipse_parameters-Tuple{SouthPark}","page":"Methods","title":"ImagePhantoms.ellipse_parameters","text":"params = ellipse_parameters(SouthPark() ; fovs::NTuple{2,Number} = (100,100))\n\nEllipse parameters for \"South Park\" phantom.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.focus_chart-Tuple{}","page":"Methods","title":"ImagePhantoms.focus_chart","text":"focus_chart( ; radius=1, nspoke=30, value=1)\n\nGenerate nspoke Triangle phantom parameters for a focus chart. Returns Vector{Object2d{Triangle} for passing to phantom.\n\nOptions\n\nradius::RealU = 1 radius of phantom\nnspoke::Int = 60 # of spokes\nvalue::Number = 1 alternate between 0 and this value\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.fwhm2spread-Tuple{Any}","page":"Methods","title":"ImagePhantoms.fwhm2spread","text":"s = fwhm2spread(w)\n\nConvert FWHM w to equivalent Gaussian spread s for exp(-π (xs)^2). exp(-π (fwhm/2/s)^2) = 1/2 means fwhm/2/s) = sqrt(log(2)/π) 2s/fwhm = sqrt(π/log(2)) 2s = fwhm * sqrt(π/log(2)) s = fwhm * sqrt(π / log(16))\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.jinc-Tuple{X} where X<:Real","page":"Methods","title":"ImagePhantoms.jinc","text":"jinc(x)\n\nReturn jinc(x) = J1(π*x)/(2x), where J1 is a Bessel function of the first kind.\n\nThe argument x must be unitless.\n\nReturn type is promote_type(typeof(x), Float32).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.mri_smap_basis-Union{Tuple{AbstractArray{Bool, D}}, Tuple{D}} where D","page":"Methods","title":"ImagePhantoms.mri_smap_basis","text":"mrismapbasis(mask ; kmax, kt, ki)\n\nConstruct Fourier basis for representing MRI sensitivity maps in terms of separable complex exponential signals, products of of the form basis = (k,N) -> exp.(2im * π * nfun(N) * kfun(k,N)). The default is nfun(N) = -(N÷2):(N÷2)-1 which is suitable for even N only. The default is kfun(k,N) = k / 2N, which is DCT-II like frequencies, leading to better boundary behavior than the DFT frequencies k/N.\n\nInput\n\nmask::AbstractArray{Bool,D} binary support mask for region to reconstruct\n\nOption\n\nkmax::Int = 5 default frequency index -kmax:kmax in all dimensions\nkfun::Function = (k,N) -> k / (2N) # DCT-II frequency\ndeltas::NTuple{D,<:Number} = ones(D) pixel sizes\n\n(For additional options kmaxs, kt, ki, see code.)\n\nOutput\n\n(; B, ν) where B is basis matrix of size count(mask) × nk where typically nk = (2*kmax+1)^D and ν is nk frequency tuples; each tuple has form ν = kfun.(Tuple(k), size(mask)) ./ deltas.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.mri_smap_fit-Union{Tuple{D}, Tuple{Vector{<:AbstractArray{<:Number, D}}, Function}} where D","page":"Methods","title":"ImagePhantoms.mri_smap_fit","text":"mri_smap_fit(smaps, embed ; mask, kwargs...)\n\nFit MRI sensitivity maps smaps using mri_smap_basis(mask ; kwargs...). Caller provides ImageGeoms.embed or equivalent.\n\nReturn named tuple (B, ν, coefs, nrmse, smaps):\n\n(B, ν) from mri_smap_basis\ncoefs::Vector : [ncoil] each of length nk\nnrmse::Real : smaps vs smaps_fit\nsmaps::Vector{Array{D}} : smaps_fit\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.mri_spectra-Tuple{AbstractVector, AbstractVector, Array{<:Object2d}, NamedTuple}","page":"Methods","title":"ImagePhantoms.mri_spectra","text":"mri_spectra(fx, fy, oa::Array{<:Object2d}, fit::NamedTuple)\n\nVersion of spectrum suitable for parallel MRI with sensitivity maps that were fit previously using mri_smap_fit. Returns a Vector of ncoil kspace data Vectors of dimension length(fx)\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{AbstractVector, AbstractVector, Array{<:Object2d}, Int64}","page":"Methods","title":"ImagePhantoms.phantom","text":"image = phantom(x, y, oa::Array{<:Object2d}, oversample::Int; T)\n\nReturn a digital image of the phantom sampled at (x,y) locations, with over-sampling factor oversample and element type T.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{AbstractVector, AbstractVector, Array{<:Object2d}}","page":"Methods","title":"ImagePhantoms.phantom","text":"image = phantom(x, y, oa::Array{<:Object2d})\n\nReturn a digital image of the phantom sampled at (x,y) locations.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Array{<:Object2d}}","page":"Methods","title":"ImagePhantoms.phantom","text":"image = phantom(oa::Array{<:Object2d})::Function\n\nReturn function image(x,y) that user can sample at any (x,y) locations to make a phantom image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Ellipse}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Ellipse})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Gauss2}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Gauss2})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Rect}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Rect})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Triangle}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Triangle})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{AbstractVector, AbstractVector, Array{<:Object2d}}","page":"Methods","title":"ImagePhantoms.radon","text":"sino = radon(r, ϕ, oa::Array{<:Object2d})\n\nReturn parallel-beam 2D sinogram sino sampled at given (r,ϕ) locations.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Array{<:Object2d}}","page":"Methods","title":"ImagePhantoms.radon","text":"sino = radon(oa::Array{<:Object2d})::Function\n\nReturn function sino(r,ϕ) that user can sample at any (r,ϕ) locations to make a phantom 2D sinogram.\n\nThe coordinate system used here is such that ϕ=0 corresponds to line integrals along the y axis for an object f(xy). Then as ϕ increases, the line integrals rotate counter-clockwise.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Ellipse}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Ellipse})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Gauss2}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Gauss2})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Rect}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Rect})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Triangle}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Triangle})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_ellipse-NTuple{7, Any}","page":"Methods","title":"ImagePhantoms.radon_ellipse","text":"radon_ellipse(r, ϕ, cx, cy, rx, ry, θ)\n\nRadon transform of ellipse at point (r,ϕ).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_gauss2-NTuple{7, Any}","page":"Methods","title":"ImagePhantoms.radon_gauss2","text":"radon_gauss2(r, ϕ, cx, cy, wx, wy, θ)\n\nRadon transform at (r,ϕ) of 2D Gaussian.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_rect-NTuple{7, Any}","page":"Methods","title":"ImagePhantoms.radon_rect","text":"radon_rect(r, ϕ, cx, cy, wx, wy, θ)\n\nRadon transform at (r,ϕ) of rectangle (involves a trapezoid).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_tri-Tuple{Any, Any, Any}","page":"Methods","title":"ImagePhantoms.radon_tri","text":"radon_tri(r, sinϕ, cosϕ)\n\nFor a line integral at radial position r and angle ϕ, the locus of points along the line is {(r cos(ϕ), r sin(ϕ)) + τ (-sin(ϕ), cos(ϕ)) : τ ∈ ℝ}. This function treats the equilateral triangle with base [-1/2,1/2], pointing upwards, as the intersection of three half planes:\n\nH0 = {(x,y) : y ≥ 0}\nH1 = y ≤ √3 (1/2 - x)\nH2 = y ≤ √3 (1/2 + x).\n\nFind the τ values where the line locus lies in each half planes, then take the length of the intersection of those three intervals.\n\nFor example, for H1 we have r sin(ϕ) + τ cos(ϕ) ≤ √3 (1/2 - (r cos(ϕ) - τ sin(ϕ))) or equivalently r (sin(ϕ) + √3 cos(ϕ)) - √3/2 ≤ τ (√3 sin(ϕ) - cos(ϕ)) which is a set the form b1 ≤ a1 τ, corresponding to some interval (l1,u1). Similarly for H0 and H2.\n\nThis approach might not be the most efficient, but it is simple.\n\nSee Peter Aundal Toft, \"The Radon transform - theory and implementation\", 1996 https://orbit.dtu.dk/en/publications/the-radon-transform-theory-and-implementation for a different approach to finding the Radon transform of a triangle.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_tri-Union{Tuple{C}, Tuple{Any, Any, C, C, C, C, Any, Any}} where C<:Number","page":"Methods","title":"ImagePhantoms.radon_tri","text":"radon_tri(r, ϕ, cx, cy, wx, wy, θ, p)\n\nRadon transform at (r,ϕ) of triangle.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.rotate-Tuple{Object2d, Number}","page":"Methods","title":"ImagePhantoms.rotate","text":"rotate(ob::Object2d, θ::RealU)\n\nIn-plane rotation of a 2D object.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.rotate-Tuple{Object3d, Tuple{Number, Number}}","page":"Methods","title":"ImagePhantoms.rotate","text":"rotate(ob::Object3d, (α,β))\nrotate(ob::Object3d, α, β=0)\n\nRotation of a 3D object.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.scale-Union{Tuple{W}, Tuple{V}, Tuple{D}, Tuple{S}, Tuple{Object{S, D, V, W}, Tuple{Vararg{Number, W}}}} where {S, D, V, W}","page":"Methods","title":"ImagePhantoms.scale","text":"scale(ob::Object, factor::RealU)\nscale(ob::Object, factor::NTuple{W,RealU})\n\nScale the width(s) by factor.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.shepp_logan","page":"Methods","title":"ImagePhantoms.shepp_logan","text":"image = shepp_logan(M, [N,], case, options...)\n\nConvenience method for generating M×N samples of Shepp-Logan phantoms.\n\nIn\n\nM::Int : horizontal size\nN::Int : vertical size, defaults to M\ncase::EllipsePhantomVersion = SheppLogan()\n\nOptions\n\noversample::Int = 3 (usually)\nyflip::Bool = true (reverse y samples for convenience.)\nkwargs... remaining options passed to ellipse_parameters for parameters.\n\nOut\n\nimage : M × N matrix\n\nThe default here is 3× over-sampling along both axes (9 samples per pixel), except for the SheppLoganBrainWeb phantom that consists of integer indices.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.shepp_logan_values-Tuple{SheppLogan}","page":"Methods","title":"ImagePhantoms.shepp_logan_values","text":"values = shepp_logan_values(::EllipsePhantomVersion)\n\nReturn 10 Shepp-Logan ellipse amplitudes for various versions.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{AbstractVector, AbstractVector, Array{<:Object2d}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"kspace = spectrum(fx, fy, oa::Array{<:Object2d})::Function\n\nReturn k-space matrix kspace sampled at given (fx,fy) locations.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Array{<:Object2d}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"kspace = spectrum(oa::Array{<:Object2d})::Function\n\nReturn function kspace(fx,fy) that user can sample at any (fx,fy) locations to make phantom 2D k-space data.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d, AbstractVector, Any}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d, coefs::AbstractVector, f::)\n\nVersion of spectrum(ob) suitable for parallel MRI with sensitivity maps that were fit previously using mri_smap_fit for a single coil with fit coefficients coefs and frequencies f (array of tuples).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d, NamedTuple, Int64}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d, fit::NamedTuple, coil::Int)\n\nVersion of spectrum(ob) suitable for parallel MRI with sensitivity maps that were fit previously using mri_smap_fit.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Ellipse}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Ellipse})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Gauss2}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Gauss2})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Rect}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Rect})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Triangle}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Triangle})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.translate-Union{Tuple{D}, Tuple{S}, Tuple{Object{S, D}, Tuple{Vararg{Number, D}}}} where {S, D}","page":"Methods","title":"ImagePhantoms.translate","text":"translate(ob::Object, shift::NTuple{D,RealU})\ntranslate(ob::Object2d, xshift, yshift)\ntranslate(ob::Object3d, xshift, yshift, zshift)\n\nTranslate the center coordinates of an object by shift\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.trapezoid-NTuple{5, Number}","page":"Methods","title":"ImagePhantoms.trapezoid","text":"trapezoid(t::RealU, t1, t2, t3, t4)\n\nUnit-height trapezoid with breakpoints t1, t2, t3, t4.\n\n\n\n\n\n","category":"method"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/01-overview.jl\"","category":"page"},{"location":"generated/examples/01-overview/#overview","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"","category":"section"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"This page explains the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"This page was generated from a single Julia file: 01-overview.jl.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"The corresponding notebook can be viewed in nbviewer here: 01-overview.ipynb, and opened in binder here: 01-overview.ipynb.","category":"page"},{"location":"generated/examples/01-overview/#Setup","page":"ImagePhantoms overview","title":"Setup","text":"","category":"section"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Packages needed here.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"using ImagePhantoms\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing UnitfulRecipes\nusing Unitful: mm\nusing InteractiveUtils: versioninfo","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/01-overview/#Overview","page":"ImagePhantoms overview","title":"Overview","text":"","category":"section"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"When developing image reconstruction methods, it can be helpful to simulate data (e.g., sinograms) using software-defined images called phantoms.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"The simplest method here is to make a Shepp-Logan phantom image similar its use in other packages.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"image = shepp_logan(256) # CT version by default\njim(image, \"SheppLogan\", clim=(0.9, 1.1), yflip=false)","category":"page"},{"location":"generated/examples/01-overview/#Sinograms-and-spectra","page":"ImagePhantoms overview","title":"Sinograms and spectra","text":"","category":"section"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Often for image reconstruction algorithm development, we need not only the phantom image, but also its sinogram and spectrum. We start with the vector of ellipses that defines the phantom, using a typical field of view (FOV) of 200mm for a head:","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"objects = shepp_logan(SheppLoganToft(); fovs=(200mm,200mm))","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"From that collection we can compute images, sinograms and spectra. It is convenient (but not required) to use ImageGeoms to help with the sampling.","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"ig = ImageGeom(dims=(200,256), deltas=(1mm,1mm))\nimage = phantom(axes(ig)..., objects)\njim(axes(ig)..., image, xlabel=\"x\", ylabel=\"y\", title=\"SheppLoganToft\")","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Here is the sinogram corresponding to this phantom, computed analytically from the ellipse parameters:","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"r = LinRange(-100mm,100mm,401)\nϕ = deg2rad.(0:180)\nsino = radon(r, ϕ, objects)\njim(r, ϕ, sino, title=\"Sinogram\", yflip=false, aspect_ratio=:none)","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Here is the 2D spectrum (Fourier transform) of this phantom, computed analytically from the ellipse parameters:","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"kspace = spectrum(axesf(ig)..., objects)\njim(axesf(ig)..., log10.(abs.(kspace/(1mm)^2)), xlabel=\"ν₁\", ylabel=\"ν₂\", title=\"log10|Spectrum|\")","category":"page"},{"location":"generated/examples/01-overview/#Reproducibility","page":"ImagePhantoms overview","title":"Reproducibility","text":"","category":"section"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"This page was generated with the following version of Julia:","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"io = IOBuffer()\nversioninfo(io)\nsplit(String(take!(io)), '\\n')","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"And with the following package versions","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"import Pkg; Pkg.status()","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"","category":"page"},{"location":"generated/examples/01-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/02-ellipse.jl\"","category":"page"},{"location":"generated/examples/02-ellipse/#ellipse","page":"Ellipse","title":"Ellipse","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"This page illustrates the Ellipse shape in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"This page was generated from a single Julia file: 02-ellipse.jl.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"The corresponding notebook can be viewed in nbviewer here: 02-ellipse.ipynb, and opened in binder here: 02-ellipse.ipynb.","category":"page"},{"location":"generated/examples/02-ellipse/#Setup","page":"Ellipse","title":"Setup","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Packages needed here.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"using ImagePhantoms: Ellipse, phantom, radon, spectrum\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing FFTW: fft, fftshift\nusing Unitful: mm, unit, °\nusing UnitfulRecipes\nusing Plots: plot, plot!, scatter!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/02-ellipse/#Overview","page":"Ellipse","title":"Overview","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"A basic shape used in constructing 2D digital image phantoms is the ellipse, specified by its center, radii, angle and value. All of the methods in ImagePhantoms support physical units, so we use such units throughout this example. (Using units is recommended but not required.)","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Define an ellipse object, using physical units.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"radii = (2mm, 8mm)\nob = Ellipse((4mm, 3mm), radii, π/6, 1.0f0)","category":"page"},{"location":"generated/examples/02-ellipse/#Phantom-image-using-phantom","page":"Ellipse","title":"Phantom image using phantom","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"dx = 0.02mm\ndy = 0.025mm\n(M,N) = (2^10,2^10+2)\nx = (-M÷2:M÷2-1) * dx\ny = (-N÷2:N÷2-1) * dy\nimg = phantom(x, y, [ob])\njim(x, y, img)","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Hereafter we use ImageGeoms to simplify the indexing.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"ig = ImageGeom(dims=(M,N), deltas=(dx,dy), offsets=(0.5,0.5))\n@assert all(axes(ig) .≈ (x,y))\np1 = jim(axes(ig)..., img, \"Ellipse phantom\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"generated/examples/02-ellipse/#Spectrum-using-spectrum","page":"Ellipse","title":"Spectrum using spectrum","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"There are two ways to examine the spectrum of this image:","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"using the analytical Fourier transform of the ellipse via spectrum\napplying the DFT via FFT to the digital image.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Because the shape has units mm, the spectra axes have units cycles/mm.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"zscale = 1 / π / prod(radii) # normalize spectra by area\nspectrum_exact = spectrum(axesf(ig)..., [ob]) * zscale\nsp = z -> max(log10(abs(z)/oneunit(abs(z))), -6) # log-scale for display\nclim = (-6, 0) # colorbar limit for display\n(xlabel, ylabel) = (\"ν₁\", \"ν₂\")\np2 = jim(axesf(ig)..., sp.(spectrum_exact), \"log10|Spectrum|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Sadly fft cannot handle units currently, so this function is a work-around:","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"function myfft(x)\n    u = unit(eltype(x))\n    return fftshift(fft(fftshift(x) / u)) * u\nend\n\nspectrum_fft = myfft(img) * dx * dy * zscale\np3 = jim(axesf(ig)..., sp.(spectrum_fft), \"log10|DFT|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Compare the DFT and analytical spectra to validate the code","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"@assert maximum(abs, spectrum_exact - spectrum_fft) /\n        maximum(abs, spectrum_exact) < 2e-2\np4 = jim(axesf(ig)..., abs.(spectrum_fft - spectrum_exact), \"Difference\"; xlabel, ylabel)\njim(p1, p4, p2, p3)","category":"page"},{"location":"generated/examples/02-ellipse/#Radon-transform-using-radon","page":"Ellipse","title":"Radon transform using radon","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Examine the Radon transform of the ellipse using radon, and validate it using the projection-slice theorem aka Fourier-slice theorem.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"dr = 0.02mm # radial sample spacing\nnr = 2^10 # radial sinogram bins\nr = (-nr÷2:nr÷2-1) * dr # radial samples\nfr = (-nr÷2:nr÷2-1) / nr / dr # corresponding spectral axis\nϕ = deg2rad.(0:180) # * Unitful.rad # todo round unitful Unitful.°\nsino = radon(ob).(r, ϕ') # sample Radon transform of a single shape object\np5 = jim(r, rad2deg.(ϕ), sino; aspect_ratio=:none, title=\"sinogram\", yflip=false, xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Note that the maximum sinogram value is about 16mm which makes sense for an ellipse whose long axis has \"radius\" 8mm.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"The above sampling generated a parallel-beam sinogram, but one could make a fan-beam sinogram by sampling (r, ϕ) appropriately.","category":"page"},{"location":"generated/examples/02-ellipse/#Fourier-slice-theorem-illustration","page":"Ellipse","title":"Fourier-slice theorem illustration","text":"","category":"section"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"Pick one particular view angle (55°) and look at its slice and spectra.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"ia = argmin(abs.(ϕ .- 55°))\nslice = sino[:,ia]\nslice_fft = myfft(slice) * dr\nangle = round(rad2deg(ϕ[ia]), digits=1)\n\nkx, ky = (fr * cos(ϕ[ia]), fr * sin(ϕ[ia])) # Fourier-slice theorem\nslice_ft = spectrum(ob).(kx, ky)\n@assert maximum(abs, slice_ft - slice_fft) / maximum(abs, slice_ft) < 2e-4\n\np3 = plot(r, slice, title=\"profile at ϕ = $angle\", label=\"\")\np4 = plot(title=\"1D spectra\")\nscatter!(fr, abs.(slice_fft), label=\"abs fft\", color=:blue)\nscatter!(fr, real(slice_fft), label=\"real fft\", color=:green)\nscatter!(fr, imag(slice_fft), label=\"imag fft\", color=:red, xlims=(-1,1).*(1.0/mm))\n\nplot!(fr, abs.(slice_ft), label=\"abs\", color=:blue)\nplot!(fr, real(slice_ft), label=\"real\", color=:green)\nplot!(fr, imag(slice_ft), label=\"imag\", color=:red)\nplot(p1, p5, p3, p4)","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"The good agreement between the analytical spectra (solid lines) and the DFT samples (disks) validates that phantom, radon, and spectrum are all self consistent for this Ellipse object.","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"","category":"page"},{"location":"generated/examples/02-ellipse/","page":"Ellipse","title":"Ellipse","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/09-disk.jl\"","category":"page"},{"location":"generated/examples/09-disk/#disk","page":"Random Disks","title":"Random Disks","text":"","category":"section"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"This page illustrates the disk_phantom_params method in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"This page was generated from a single Julia file: 09-disk.jl.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"The corresponding notebook can be viewed in nbviewer here: 09-disk.ipynb, and opened in binder here: 09-disk.ipynb.","category":"page"},{"location":"generated/examples/09-disk/#Setup","page":"Random Disks","title":"Setup","text":"","category":"section"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"Packages needed here.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"using ImagePhantoms: Ellipse, phantom, disk_phantom_params\nusing ImageGeoms: ImageGeom\nusing MIRTjim: jim, prompt\nusing Plots # @animate, gif","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/09-disk/#Overview","page":"Random Disks","title":"Overview","text":"","category":"section"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"For training machine-learning methods for image reconstruction, it can be helpful to have a way to generate a family of phantoms drawn from some common distribution, especially for debugging or when real ground-truth data is limited. The disk_phantom_params function is one example of how one can use the tools in this package to generate such phantoms.","category":"page"},{"location":"generated/examples/09-disk/#A-single-disk-phantom-image","page":"Random Disks","title":"A single disk phantom image","text":"","category":"section"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"function disk_phantom(title::String)\n    (dx,dy) = (1, 1)\n    (M,N) = (2^8,2^8)\n    x = (-M÷2:M÷2-1) * dx\n    y = (-N÷2:N÷2-1) * dy\n    params = disk_phantom_params( ; rhead = () -> rand(100:105))\n    objects = Ellipse(params) # vector of Ellipse objects\n    oversample = 3\n    img = phantom(x, y, objects, oversample)\n    jim(x, y, img; title, clim=(0,1300))\nend\ndisk_phantom(\"A single disk phantom realization\")","category":"page"},{"location":"generated/examples/09-disk/#Several-realizations","page":"Random Disks","title":"Several realizations","text":"","category":"section"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"anim = @animate for i in 1:8\n    disk_phantom(\"Realization $i\")\nend\ngif(anim, \"disk.gif\", fps = 6)","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"","category":"page"},{"location":"generated/examples/09-disk/","page":"Random Disks","title":"Random Disks","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/03-rect.jl\"","category":"page"},{"location":"generated/examples/03-rect/#rect","page":"Rectangle","title":"Rectangle","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"This page illustrates the Rect shape in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"This page was generated from a single Julia file: 03-rect.jl.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"The corresponding notebook can be viewed in nbviewer here: 03-rect.ipynb, and opened in binder here: 03-rect.ipynb.","category":"page"},{"location":"generated/examples/03-rect/#Setup","page":"Rectangle","title":"Setup","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Packages needed here.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"using ImagePhantoms: Rect, phantom, radon, spectrum\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing FFTW: fft, fftshift\nusing Unitful: mm, unit, °\nusing UnitfulRecipes\nusing Plots: plot, plot!, scatter!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/03-rect/#Overview","page":"Rectangle","title":"Overview","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"A basic shape used in constructing 2D digital image phantoms is the rectangle, specified by its center, widths, angle and value. All of the methods in ImagePhantoms support physical units, so we use such units throughout this example. (Using units is recommended but not required.)","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Define an rectangle object, using physical units.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"width = (2mm, 8mm)\nob = Rect((4mm, 3mm), width, π/6, 1.0f0)","category":"page"},{"location":"generated/examples/03-rect/#Phantom-image-using-phantom","page":"Rectangle","title":"Phantom image using phantom","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"dx = 0.02mm\ndy = 0.025mm\n(M,N) = (2^10,2^10+2)\nx = (-M÷2:M÷2-1) * dx\ny = (-N÷2:N÷2-1) * dy\nimg = phantom(x, y, [ob])\njim(x, y, img)","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Hereafter we use ImageGeoms to simplify the indexing.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"ig = ImageGeom(dims=(M,N), deltas=(dx,dy), offsets=(0.5,0.5))\n@assert all(axes(ig) .≈ (x,y))\np1 = jim(axes(ig)..., img, \"Rect phantom\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"generated/examples/03-rect/#Spectrum-using-spectrum","page":"Rectangle","title":"Spectrum using spectrum","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"There are two ways to examine the spectrum of this image:","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"using the analytical Fourier transform of the rect via spectrum\napplying the DFT via FFT to the digital image.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Because the shape has units mm, the spectra axes have units cycles/mm.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"zscale = 1 / prod(width) # normalize spectra by area\nspectrum_exact = spectrum(axesf(ig)..., [ob]) * zscale\nsp = z -> max(log10(abs(z)/oneunit(abs(z))), -6) # log-scale for display\nclim = (-6, 0) # colorbar limit for display\n(xlabel, ylabel) = (\"ν₁\", \"ν₂\")\np2 = jim(axesf(ig)..., sp.(spectrum_exact), \"log10|Spectrum|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Sadly fft cannot handle units currently, so this function is a work-around:","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"function myfft(x)\n    u = unit(eltype(x))\n    return fftshift(fft(fftshift(x) / u)) * u\nend\n\nspectrum_fft = myfft(img) * dx * dy * zscale\np3 = jim(axesf(ig)..., sp.(spectrum_fft), \"log10|DFT|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Compare the DFT and analytical spectra to validate the code","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"@assert maximum(abs, spectrum_exact - spectrum_fft) /\n        maximum(abs, spectrum_exact) < 2e-2\np4 = jim(axesf(ig)..., abs.(spectrum_fft - spectrum_exact), \"Difference\"; xlabel, ylabel)\njim(p1, p4, p2, p3)","category":"page"},{"location":"generated/examples/03-rect/#Radon-transform-using-radon","page":"Rectangle","title":"Radon transform using radon","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Examine the Radon transform of the rect using radon, and validate it using the projection-slice theorem aka Fourier-slice theorem.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"dr = 0.02mm # radial sample spacing\nnr = 2^10 # radial sinogram bins\nr = (-nr÷2:nr÷2-1) * dr # radial samples\nfr = (-nr÷2:nr÷2-1) / nr / dr # corresponding spectral axis\nϕ = deg2rad.(0:180) # * Unitful.rad # todo round unitful Unitful.°\nsino = radon(ob).(r, ϕ') # sample Radon transform of a single shape object\np5 = jim(r, rad2deg.(ϕ), sino; aspect_ratio=:none, title=\"sinogram\", yflip=false, xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"The maximum sinogram value is about sqrt(8^2+2^2) = 8.2mm, which makes sense for a 8mm × 2mm rect.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"The above sampling generated a parallel-beam sinogram, but one could make a fan-beam sinogram by sampling (r, ϕ) appropriately.","category":"page"},{"location":"generated/examples/03-rect/#Fourier-slice-theorem-illustration","page":"Rectangle","title":"Fourier-slice theorem illustration","text":"","category":"section"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"Pick one particular view angle (55°) and look at its slice and spectra.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"ia = argmin(abs.(ϕ .- 55°))\nslice = sino[:,ia]\nslice_fft = myfft(slice) * dr\nangle = round(rad2deg(ϕ[ia]), digits=1)\n\nkx, ky = (fr * cos(ϕ[ia]), fr * sin(ϕ[ia])) # Fourier-slice theorem\nslice_ft = spectrum(ob).(kx, ky)\n@assert maximum(abs, slice_ft - slice_fft) / maximum(abs, slice_ft) < 2e-4\n\np3 = plot(r, slice, title=\"profile at ϕ = $angle\", label=\"\")\np4 = plot(title=\"1D spectra\")\nscatter!(fr, abs.(slice_fft), label=\"abs fft\", color=:blue)\nscatter!(fr, real(slice_fft), label=\"real fft\", color=:green)\nscatter!(fr, imag(slice_fft), label=\"imag fft\", color=:red, xlims=(-1,1).*(1.0/mm))\n\nplot!(fr, abs.(slice_ft), label=\"abs\", color=:blue)\nplot!(fr, real(slice_ft), label=\"real\", color=:green)\nplot!(fr, imag(slice_ft), label=\"imag\", color=:red)\nplot(p1, p5, p3, p4)","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"The good agreement between the analytical spectra (solid lines) and the DFT samples (disks) validates that phantom, radon, and spectrum are all self consistent for this Rect object.","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"","category":"page"},{"location":"generated/examples/03-rect/","page":"Rectangle","title":"Rectangle","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/05-triangle.jl\"","category":"page"},{"location":"generated/examples/05-triangle/#triangle","page":"Triangle","title":"Triangle","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"This page illustrates the Triangle shape in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"This page was generated from a single Julia file: 05-triangle.jl.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"The corresponding notebook can be viewed in nbviewer here: 05-triangle.ipynb, and opened in binder here: 05-triangle.ipynb.","category":"page"},{"location":"generated/examples/05-triangle/#Setup","page":"Triangle","title":"Setup","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Packages needed here.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"using ImagePhantoms: Triangle, phantom, radon, spectrum\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing FFTW: fft, fftshift\nusing Unitful: mm, unit, °\nusing UnitfulRecipes\nusing Plots: plot, plot!, scatter!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/05-triangle/#Overview","page":"Triangle","title":"Overview","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"For completeness, this package includes a triangle shape for constructing 2D digital image phantoms. (One could describe quite complicated phantoms with a triangular mesh.) The basic shape here is an equilateral triangle whose base is [-1/2,1/2] along the x axis, pointing upwards along the y axis. When defining such a Triangle object one can specify its center, widths, angle and value. All of the methods in ImagePhantoms support physical units, so we use such units throughout this example. (Using units is recommended but not required.)","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Define a triangle object, using physical units.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"width = (2mm, 8mm)\nob = Triangle((4mm, 3mm), width, π/6, 1.0f0)","category":"page"},{"location":"generated/examples/05-triangle/#Phantom-image-using-phantom","page":"Triangle","title":"Phantom image using phantom","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"dx = 0.02mm\ndy = 0.025mm\n(M,N) = (2^10,2^10+2)\nx = (-M÷2:M÷2-1) * dx\ny = (-N÷2:N÷2-1) * dy\nimg = phantom(x, y, [ob])\njim(x, y, img)","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Hereafter we use ImageGeoms to simplify the indexing.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"ig = ImageGeom(dims=(M,N), deltas=(dx,dy), offsets=(0.5,0.5))\n@assert all(axes(ig) .≈ (x,y))\np1 = jim(axes(ig)..., img, \"Triangle phantom\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"generated/examples/05-triangle/#Spectrum-using-spectrum","page":"Triangle","title":"Spectrum using spectrum","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"There are two ways to examine the spectrum of this image:","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"using the analytical Fourier transform of the triangle via spectrum\napplying the DFT via FFT to the digital image.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Because the shape has units mm, the spectra axes have units cycles/mm.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"zscale = 1 / (sqrt(3) / 4 * prod(width)) # normalize spectra by area\nspectrum_exact = spectrum(axesf(ig)..., [ob]) * zscale\nsp = z -> max(log10(abs(z)/oneunit(abs(z))), -6) # log-scale for display\nclim = (-6, 0) # colorbar limit for display\n(xlabel, ylabel) = (\"ν₁\", \"ν₂\")\np2 = jim(axesf(ig)..., sp.(spectrum_exact), \"log10|Spectrum|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Sadly fft cannot handle units currently, so this function is a work-around:","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"function myfft(x)\n    u = unit(eltype(x))\n    return fftshift(fft(fftshift(x) / u)) * u\nend\n\nspectrum_fft = myfft(img) * dx * dy * zscale\np3 = jim(axesf(ig)..., sp.(spectrum_fft), \"log10|DFT|\"; clim, xlabel, ylabel)","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Compare the DFT and analytical spectra to validate the code","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"@assert maximum(abs, spectrum_exact - spectrum_fft) /\n        maximum(abs, spectrum_exact) < 2e-2\np4 = jim(axesf(ig)..., abs.(spectrum_fft - spectrum_exact), \"Difference\"; xlabel, ylabel)\njim(p1, p4, p2, p3)","category":"page"},{"location":"generated/examples/05-triangle/#Radon-transform-using-radon","page":"Triangle","title":"Radon transform using radon","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Examine the Radon transform of the triangle using radon, and validate it using the projection-slice theorem aka Fourier-slice theorem.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"dr = 0.02mm # radial sample spacing\nnr = 2^10 # radial sinogram bins\nr = (-nr÷2:nr÷2-1) * dr # radial samples\nfr = (-nr÷2:nr÷2-1) / nr / dr # corresponding spectral axis\nϕ = deg2rad.(0:180) # * Unitful.rad # todo round unitful Unitful.°\nsino = radon(ob).(r, ϕ') # sample Radon transform of a single shape object\np5 = jim(r, rad2deg.(ϕ), sino; aspect_ratio=:none, title=\"sinogram\", yflip=false, xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"The maximum sinogram value is about 7mm, which makes sense for a triangle whose height is 8mm * sqrt(3) / 2 and whose base is 2mm, so the longest side is sqrt(1^2 + (8mm * sqrt(3) / 2)^2) = 7 mm.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"The above sampling generated a parallel-beam sinogram, but one could make a fan-beam sinogram by sampling (r, ϕ) appropriately.","category":"page"},{"location":"generated/examples/05-triangle/#Fourier-slice-theorem-illustration","page":"Triangle","title":"Fourier-slice theorem illustration","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"Pick one particular view angle (55°) and look at its slice and spectra.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"ia = argmin(abs.(ϕ .- 55°))\nslice = sino[:,ia]\nslice_fft = myfft(slice) * dr\nangle = round(rad2deg(ϕ[ia]), digits=1)\n\nkx, ky = (fr * cos(ϕ[ia]), fr * sin(ϕ[ia])) # Fourier-slice theorem\nslice_ft = spectrum(ob).(kx, ky)\n@assert maximum(abs, slice_ft - slice_fft) / maximum(abs, slice_ft) < 2e-4\n\np3 = plot(r, slice, title=\"profile at ϕ = $angle\", label=\"\")\np4 = plot(title=\"1D spectra\")\nscatter!(fr, abs.(slice_fft), label=\"abs fft\", color=:blue)\nscatter!(fr, real(slice_fft), label=\"real fft\", color=:green)\nscatter!(fr, imag(slice_fft), label=\"imag fft\", color=:red, xlims=(-1,1).*(1.0/mm))\n\nplot!(fr, abs.(slice_ft), label=\"abs\", color=:blue)\nplot!(fr, real(slice_ft), label=\"real\", color=:green)\nplot!(fr, imag(slice_ft), label=\"imag\", color=:red)\nplot(p1, p5, p3, p4)","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"The good agreement between the analytical spectra (solid lines) and the DFT samples (disks) validates that phantom, radon, and spectrum are all self consistent for this Triangle object.","category":"page"},{"location":"generated/examples/05-triangle/#Spectrum","page":"Triangle","title":"Spectrum","text":"","category":"section"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"The spectrum of a triangle is not widely available; for a derivation, see this overleaf file.","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"","category":"page"},{"location":"generated/examples/05-triangle/","page":"Triangle","title":"Triangle","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/08-focus.jl\"","category":"page"},{"location":"generated/examples/08-focus/#focus","page":"Focus Chart","title":"Focus Chart","text":"","category":"section"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"This page illustrates the focus_chart method in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"This page was generated from a single Julia file: 08-focus.jl.","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"The corresponding notebook can be viewed in nbviewer here: 08-focus.ipynb, and opened in binder here: 08-focus.ipynb.","category":"page"},{"location":"generated/examples/08-focus/#Setup","page":"Focus Chart","title":"Setup","text":"","category":"section"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"Packages needed here.","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"using ImagePhantoms: focus_chart, phantom\nusing MIRTjim: jim","category":"page"},{"location":"generated/examples/08-focus/#Focus-chart-phantom-image","page":"Focus Chart","title":"Focus chart phantom image","text":"","category":"section"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"One of the shapes in ImagePhantoms is an equilateral triangle, and by scaling and translating this shape one can define a focus chart phantom.","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"ob = focus_chart( ; nspoke = 56, value = 4)\nx = LinRange(-1,1,2^9) * 1.1\ny = x\nimage = phantom(ob).(x, y')\njim(x, y, image; title = \"Focus chart phantom\")","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"","category":"page"},{"location":"generated/examples/08-focus/","page":"Focus Chart","title":"Focus Chart","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/main/docs/lit/examples/docs/lit/examples/07-shepp.jl\"","category":"page"},{"location":"generated/examples/07-shepp/#shepp","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This page illustrates the Shepp-Logan phantoms in the Julia package ImagePhantoms.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This page was generated from a single Julia file: 07-shepp.jl.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"In any such Julia documentation, you can access the source code using the \"Edit on GitHub\" link in the top right.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"The corresponding notebook can be viewed in nbviewer here: 07-shepp.ipynb, and opened in binder here: 07-shepp.ipynb.","category":"page"},{"location":"generated/examples/07-shepp/#Setup","page":"Shepp-Logan Phantoms","title":"Setup","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Packages needed here.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"using ImagePhantoms\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"generated/examples/07-shepp/#Overview","page":"Shepp-Logan Phantoms","title":"Overview","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"There are several variations of the Shepp-Logan phantom available.","category":"page"},{"location":"generated/examples/07-shepp/#CT-version","page":"Shepp-Logan Phantoms","title":"CT version","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Original version from: Larry A Shepp, Benjamin F Logan, \"The Fourier reconstruction of a head section,\" IEEE Transactions on Nuclear Science, 21(3):21-42, June 1974. doi","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This (default) version has low soft tissue contrast, so it usually should be displayed with a narrow window the using clim option:","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image1 = shepp_logan(256) # CT version by default\njim(image1, \"SheppLogan (original CT version)\", clim=(0.95, 1.05))","category":"page"},{"location":"generated/examples/07-shepp/#Over-sampling","page":"Shepp-Logan Phantoms","title":"Over-sampling","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"When generating ellipse phantoms, it is generally preferable to \"over-sample\" the ellipse values within each pixel to account for partial volume effect. A factor of 3 over-sampling (along both axes) typically suffices, so this factor is the default for the shepp_logan method. Here is how the phantom image looks without over-sampling:","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image1o = shepp_logan(256; oversample=1)\njim(image1o, \"No over sampling\", clim=(0.95,1.05))","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Note that boundaries of the interior ellipses look smoother in the original version with the default 3× over-sampling. Most of the remaining examples use the recommended default over-sampling.","category":"page"},{"location":"generated/examples/07-shepp/#Toft-version","page":"Shepp-Logan Phantoms","title":"Toft version","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This version is from: Toft, Peter Aundal & Sørensen, John Aasted \"The Radon transform-theory and implementation,\" Technical University of Denmark (DTU), 1996. Page 201. pdf","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image2 = shepp_logan(256, SheppLoganToft())\njim(image2, \"SheppLoganToft\")","category":"page"},{"location":"generated/examples/07-shepp/#Emission-tomography-version","page":"Shepp-Logan Phantoms","title":"Emission tomography version","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This version has low intensity for the skull because typical PET/SPECT radiotracers do not accumulate in bone regions. It is probably also useful for MRI, because typical MRI scans have low signal from bone.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image3 = shepp_logan(256, SheppLoganEmis())\njim(image3, \"SheppLoganEmis\")","category":"page"},{"location":"generated/examples/07-shepp/#BrainWeb-version","page":"Shepp-Logan Phantoms","title":"BrainWeb version","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This version was inspired by the BrainWeb phantoms that have integer indices for each of the different regions. It should not be used directly, but rather one should assign meaningful intensity values to each of the integer indices.","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image4 = shepp_logan(256, SheppLoganBrainWeb())\njim(image4, \"SheppLoganBrainWeb\")","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"For the BrainWeb version, there is no over-sampling by default, to preserve the integer indices.","category":"page"},{"location":"generated/examples/07-shepp/#Disjoint-middle-ellipses","page":"Shepp-Logan Phantoms","title":"Disjoint middle ellipses","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Sometimes it can be more convenient to have the middle ellipses be non-overlapping:","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"ob = ellipse_parameters(SheppLoganBrainWeb(), disjoint=true)\nob[:,end] = 1:10\nob = Ellipse(ob)\nx = LinRange(-0.4, 0.4, 206)\ny = LinRange(-0.5, 0.5, 256)\noversample = 3\nimage5 = phantom(x, y, ob, oversample)\njim(x, y, image5, \"Disjoint\")","category":"page"},{"location":"generated/examples/07-shepp/#Comedy-version","page":"Shepp-Logan Phantoms","title":"Comedy version","text":"","category":"section"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image6 = shepp_logan(256, SouthPark(); fovs=(1,1))\njim(image6, \"SouthPark\")","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"","category":"page"},{"location":"generated/examples/07-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImagePhantoms","category":"page"},{"location":"#ImagePhantoms.jl-Documentation","page":"Home","title":"ImagePhantoms.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides tools for constructing digital software \"phantoms\" used for testing image reconstruction algorithms. The most famous such phantom is the \"Shepp Logan\" phantom from this 1974 paper. (A variant of that phantom serves as the logo for the JuliaImageRecon suite of tools.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A phantom is a collection (iterable) of shapes (e.g., ellipses, rectangles). One purpose of this package is to avoid the inverse crime of using a discretized or sampled image to generate sinograms or spectra.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The shapes in this package have methods useful for simulating data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"phantom returns a function of (x,y) or (x,y,z)  that one can evaluate on a grid to make a pixelated or voxelized phantom.\nradon returns a function of (r,ϕ)  that one can evaluate on a grid  to make a sampled 2D parallel-beam sinogram,  or evaluate appropriately to make a sampled fan-beam sinogram.\nspectrum returns a function of spatial frequencies that one can sample to simulate k-space data (e.g., in MRI).","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Examples tab for details.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Michigan Image Reconstruction Toolbox (MIRT) currently has an older interface ellipse_im, rect_im, etc., similar to the functions of the same name in the Matlab version of MIRT provided for backward compatibility. Using ImagePhantoms is recommended for Julia work.","category":"page"},{"location":"#Units","page":"Home","title":"Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package allows the shapes to be described with physical units, e.g., using Unitful.jl. Using units is recommended but not required. If units are not used explicitly, then the user must be especially careful to use values corresponding to consistent units. For example, if the shape sizes are in cm, then","category":"page"},{"location":"","page":"Home","title":"Home","text":"the arguments to phantom must also be in cm units,\nthe first (r) argument to radon must also be in cm and the ϕ argument must be in radians,\nthe spatial frequency arguments to spectrum must be in cycles/cm units.","category":"page"}]
}
